{"version":3,"sources":["Context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/Header.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/pages/About.js","components/pages/NotFound.js","components/test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onShowClick","onDeleteClick","a","delete","name","email","phone","className","onClick","style","cursor","bind","float","color","to","marginRight","Contacts","Fragment","key","Header","branding","href","defaultProps","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","AddContact","errors","e","target","onSubmit","preventDefault","newContact","post","history","push","EditContact","updateContact","match","params","put","Test","title","body","fetch","then","response","json","App","exact","path","component","About","NotFound","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"y3BAGA,IAAMA,EAAUC,IAAMC,gBAEhBC,EAAU,SAACC,EAAOC,GACpB,OAAOA,EAAOC,MACV,IAAK,iBACD,OAAO,EAAP,GACOF,EADP,CAEIG,SAAUH,EAAMG,SAASC,OAAO,SAAAC,GAAO,OACnCA,EAAQC,KAAOL,EAAOM,YAElC,IAAK,cACD,OAAO,EAAP,GACOP,EADP,CAEIG,SAAS,CAAEF,EAAOM,SAAV,mBAAsBP,EAAMG,aAE5C,IAAK,iBACD,OAAO,EAAP,GACOH,EADP,CAEIG,SAAUH,EAAMG,SAASK,IAAI,SAAAH,GAAO,OAAIA,EAAQC,KAAOL,EAAOM,QAAQD,GAAMD,EAAUJ,EAAOM,QAAWF,MAEhH,QACI,OAAOL,IAINS,EAAb,2MACIT,MAAQ,CACJG,SAAU,GACVO,SAAU,SAAAT,GACN,EAAKU,SAAS,SAAAX,GAAK,OAAID,EAAQC,EAAOC,OAJlD,iNAU0BW,IAAMC,IAAI,8CAVpC,OAUcC,EAVd,OAaQC,KAAKJ,SAAS,CAACR,SAAUW,EAAIE,OAbrC,mIAiBQ,OACI,kBAACpB,EAAQa,SAAT,CAAkBQ,MAAOF,KAAKf,OACzBe,KAAKG,MAAMC,cAnB5B,GAA8BC,aAyBjBC,EAAWzB,EAAQyB,SC/CXC,E,2MACjBtB,MAAQ,CACJuB,iBAAiB,G,EAGrBC,YAAc,WACV,EAAKb,SAAS,CAAEY,iBAAkB,EAAKvB,MAAMuB,mB,EAGjDE,c,sCAAgB,WAAOnB,EAAII,GAAX,SAAAgB,EAAA,qEAENd,IAAMe,OAAN,qDAA2DrB,IAFrD,OAIZI,EAAS,CAACR,KAAM,iBAAkBK,QAASD,IAJ/B,yC,gIAON,IAAD,SAC8BS,KAAKG,MAAMb,QAAtCC,EADH,EACGA,GAAIsB,EADP,EACOA,KAAMC,EADb,EACaA,MAAOC,EADpB,EACoBA,MACjBP,EAAoBR,KAAKf,MAAzBuB,gBAER,OACI,kBAACF,EAAD,KACK,SAAAJ,GAAU,IACCP,EAAaO,EAAbP,SACR,OACI,yBAAKqB,UAAU,uBACX,4BACKH,EACD,uBAAGI,QAAS,EAAKR,YACbO,UAAU,mBACVE,MAAO,CAAEC,OAAQ,aACrB,uBAAGF,QAAS,EAAKP,cAAcU,KAAK,EAAM7B,EAAII,GAC1CqB,UAAU,eACVE,MAAO,CAAEC,OAAQ,UAAWE,MAAO,QAASC,MAAO,SACvD,kBAAC,IAAD,CAAMC,GAAE,uBAAkBhC,IACtB,uBAAGyB,UAAU,oBACTE,MAAO,CAACC,OAAQ,UAAWE,MAAO,QAASC,MAAO,QAASE,YAAa,YAInFhB,EACG,wBAAIQ,UAAU,cACV,wBAAIA,UAAU,mBAAd,UAAwCF,GACxC,wBAAIE,UAAU,mBAAd,UAAwCD,IAE5C,Y,GA7CKV,aCyBtBoB,E,iLAvBP,OACI,kBAACnB,EAAD,KACK,SAAAJ,GAAU,IACAd,EAAYc,EAAZd,SACP,OACI,kBAAC,IAAMsC,SAAP,KACI,wBAAIV,UAAU,kBACV,0BAAMA,UAAU,eAAhB,WADJ,SAGC5B,EAASK,IAAI,SAAAH,GAAO,OACjB,kBAAC,EAAD,CACIqC,IAAKrC,EAAQC,GACbD,QAASA,a,GAftBe,aCDjBuB,EAAS,SAACzB,GAAW,IACf0B,EAAa1B,EAAb0B,SACR,OACI,yBAAKb,UAAU,2DACX,yBAAKA,UAAU,aACX,uBAAGc,KAAK,IAAId,UAAU,gBACjBa,GAEL,6BACI,wBAAIb,UAAU,sBACV,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAAMO,GAAG,IAAIP,UAAU,YACnB,uBAAGA,UAAU,gBADjB,SAKJ,4BACI,kBAAC,IAAD,CAAMO,GAAG,eAAeP,UAAU,YAC9B,uBAAGA,UAAU,gBADjB,gBAKJ,4BACI,kBAAC,IAAD,CAAMO,GAAG,SAASP,UAAU,YAC5B,uBAAGA,UAAU,oBADb,eAY5BY,EAAOG,aAAe,CAClBF,SAAU,UAOCD,Q,iBC3CTI,EAAiB,SAAC,GAAgE,IAA9DC,EAA6D,EAA7DA,MAAOpB,EAAsD,EAAtDA,KAAMX,EAAgD,EAAhDA,MAAOgC,EAAyC,EAAzCA,YAAa/C,EAA4B,EAA5BA,KAAMgD,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MACzE,OACE,6BACE,yBAAKpB,UAAU,cACb,2BAAOqB,QAASxB,GAAOoB,GACvB,2BAAO9C,KAAMA,EACX0B,KAAMA,EACNG,UAAWsB,IAAW,+BAAgC,CAAC,aAAcF,IACrEF,YAAaA,EACbhC,MAAOA,EACPiC,SAAUA,IACXC,GAAS,yBAAKpB,UAAU,oBAAoBoB,MAgBrDJ,EAAeD,aAAe,CAC5B5C,KAAM,QAGO6C,QC2EAO,E,2MAxGbtD,MAAQ,CACN4B,KAAM,GACNC,MAAO,GACPC,MAAO,GACPyB,OAAQ,I,EAGVL,SAAW,SAAAM,GACT,EAAK7C,SAAL,eAAiB6C,EAAEC,OAAO7B,KAAO4B,EAAEC,OAAOxC,S,EAG5CyC,S,sCAAW,WAAOhD,EAAU8C,GAAjB,yBAAA9B,EAAA,wDACT8B,EAAEG,iBADO,EAGsB,EAAK3D,MAA5B4B,EAHC,EAGDA,KAAMC,EAHL,EAGKA,MAAOC,EAHZ,EAGYA,MAGT,KAATF,EANM,uBAOP,EAAKjB,SAAS,CAAC4C,OAAQ,CAAE3B,KAAM,sBAPxB,6BAUI,KAAVC,EAVM,uBAWP,EAAKlB,SAAS,CAAC4C,OAAQ,CAAE1B,MAAO,uBAXzB,6BAcI,KAAVC,EAdM,wBAeP,EAAKnB,SAAS,CAAC4C,OAAQ,CAAEzB,MAAO,uBAfzB,kCAmBH8B,EAAa,CACjBhC,OACAC,QACAC,SAtBO,UAyBSlB,IAAMiD,KAAK,6CAA8CD,GAzBlE,QAyBH9C,EAzBG,OA0BTJ,EAAS,CAACR,KAAM,cAAeK,QAASO,EAAIE,OAG5C,EAAKL,SAAS,CACZiB,KAAM,GACNC,MAAO,GACPC,MAAO,GACPyB,OAAQ,KAIV,EAAKrC,MAAM4C,QAAQC,KAAK,KArCf,0C,gIAwCD,IAAD,SACgChD,KAAKf,MAApC4B,EADD,EACCA,KAAMC,EADP,EACOA,MAAOC,EADd,EACcA,MAAOyB,EADrB,EACqBA,OAE5B,OACE,kBAAClC,EAAD,KACG,SAAAJ,GAAU,IACDP,EAAaO,EAAbP,SACR,OACE,yBAAKqB,UAAU,aACb,yBAAKA,UAAU,eAAf,cAEA,yBAAKA,UAAU,aACX,0BAAM2B,SAAU,EAAKA,SAASvB,KAAK,EAAMzB,IACvC,kBAAC,EAAD,CACEsC,MAAM,OACNpB,KAAK,OACLqB,YAAY,gBACZhC,MAAOW,EACPsB,SAAU,EAAKA,SACfC,MAAOI,EAAO3B,OAEhB,kBAAC,EAAD,CACEoB,MAAM,QACNpB,KAAK,QACL1B,KAAK,QACL+C,YAAY,iBACZhC,MAAOY,EACPqB,SAAU,EAAKA,SACfC,MAAOI,EAAO1B,QAEhB,kBAAC,EAAD,CACEmB,MAAM,QACNpB,KAAK,QACLqB,YAAY,iBACZhC,MAAOa,EACPoB,SAAU,EAAKA,SACfC,MAAOI,EAAOzB,QAGhB,2BAAO5B,KAAK,SACVe,MAAM,cACNc,UAAU,wC,GA7FPX,aCyHV4C,E,2MAxHbhE,MAAQ,CACN4B,KAAM,GACNC,MAAO,GACPC,MAAO,GACPyB,OAAQ,I,EAiBVL,SAAW,SAAAM,GACT,EAAK7C,SAAL,eAAiB6C,EAAEC,OAAO7B,KAAO4B,EAAEC,OAAOxC,S,EAG5CyC,S,sCAAW,WAAOhD,EAAU8C,GAAjB,2BAAA9B,EAAA,wDACT8B,EAAEG,iBADO,EAGsB,EAAK3D,MAA5B4B,EAHC,EAGDA,KAAMC,EAHL,EAGKA,MAAOC,EAHZ,EAGYA,MAGT,KAATF,EANM,uBAOP,EAAKjB,SAAS,CAAC4C,OAAQ,CAAE3B,KAAM,sBAPxB,6BAUI,KAAVC,EAVM,uBAWP,EAAKlB,SAAS,CAAC4C,OAAQ,CAAE1B,MAAO,uBAXzB,6BAcI,KAAVC,EAdM,wBAeP,EAAKnB,SAAS,CAAC4C,OAAQ,CAAEzB,MAAO,uBAfzB,kCAmBHmC,EAAgB,CACpBrC,OACAC,QACAC,SAIKxB,EAAM,EAAKY,MAAMgD,MAAMC,OAAvB7D,GA1BE,UA2BSM,IAAMwD,IAAN,qDAAwD9D,GAAM2D,GA3BvE,QA2BHnD,EA3BG,OA4BTJ,EAAS,CAACR,KAAM,iBAAkBK,QAASO,EAAIE,OAG/C,EAAKL,SAAS,CACZiB,KAAM,GACNC,MAAO,GACPC,MAAO,GACPyB,OAAQ,KAIV,EAAKrC,MAAM4C,QAAQC,KAAK,KAvCf,0C,oQAjBFzD,EAAMS,KAAKG,MAAMgD,MAAMC,OAAvB7D,G,SAEWM,IAAMC,IAAN,qDAAwDP,I,OAApEQ,E,OAEAT,EAAUS,EAAIE,KAEpBD,KAAKJ,SAAS,CACZiB,KAAMvB,EAAQuB,KACdC,MAAOxB,EAAQwB,MACfC,MAAOzB,EAAQyB,Q,mIAkDT,IAAD,SACgCf,KAAKf,MAApC4B,EADD,EACCA,KAAMC,EADP,EACOA,MAAOC,EADd,EACcA,MAAOyB,EADrB,EACqBA,OAE5B,OACE,kBAAClC,EAAD,KACG,SAAAJ,GAAU,IACDP,EAAaO,EAAbP,SACR,OACE,yBAAKqB,UAAU,aACb,yBAAKA,UAAU,eAAf,eAEA,yBAAKA,UAAU,aACX,0BAAM2B,SAAU,EAAKA,SAASvB,KAAK,EAAMzB,IACvC,kBAAC,EAAD,CACEsC,MAAM,OACNpB,KAAK,OACLqB,YAAY,gBACZhC,MAAOW,EACPsB,SAAU,EAAKA,SACfC,MAAOI,EAAO3B,OAEhB,kBAAC,EAAD,CACEoB,MAAM,QACNpB,KAAK,QACL1B,KAAK,QACL+C,YAAY,iBACZhC,MAAOY,EACPqB,SAAU,EAAKA,SACfC,MAAOI,EAAO1B,QAEhB,kBAAC,EAAD,CACEmB,MAAM,QACNpB,KAAK,QACLqB,YAAY,iBACZhC,MAAOa,EACPoB,SAAU,EAAKA,SACfC,MAAOI,EAAOzB,QAGhB,2BAAO5B,KAAK,SACVe,MAAM,iBACNc,UAAU,wC,GA7GNX,aCHX,aACb,OACE,6BACE,wBAAIW,UAAU,aAAd,yBACA,uBAAGA,UAAU,QAAb,iCACA,uBAAGA,UAAU,iBAAb,mBCLS,aACb,OACE,6BACE,wBAAIA,UAAU,aACd,0BAAMA,UAAU,eAAhB,OADA,mBAGA,uBAAGA,UAAU,QAAb,gCCoBSsC,E,2MAzBfrE,MAAQ,CACNsE,MAAO,GACPC,KAAM,I,mFAGe,IAAD,OAClBC,MAAM,gDACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAzD,GAAI,OAAI,EAAKL,SAAS,CAC1B2D,MAAOtD,EAAKsD,MACZC,KAAMvD,EAAKuD,W,+BAIP,IAAD,EACiBxD,KAAKf,MAArBsE,EADD,EACCA,MAAOC,EADR,EACQA,KACf,OACE,6BACE,4BAAKD,GACL,2BAAIC,Q,GApBOnD,aCoCJwD,G,6LAvBX,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,yBAAK7C,UAAU,OACb,kBAAC,EAAD,CAAQa,SAAS,oBACjB,yBAAKb,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8C,OAAK,EAACC,KAAK,IAAIC,UAAWvC,IACjC,kBAAC,IAAD,CAAOqC,OAAK,EAACC,KAAK,eAAeC,UAAWzB,IAC5C,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,oBAAoBC,UAAWf,IACjD,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,SAASC,UAAWC,IACtC,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,QAAQC,UAAWV,IACrC,kBAAC,IAAD,CAAOU,UAAWE,a,GAdhBpF,IAAMuB,YCDJ8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,2DCbNoB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC,iB","file":"static/js/main.891ec2cc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios'\r\n\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (state, action) => {\r\n    switch(action.type) {\r\n        case 'DELETE_CONTACT': \r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.filter(contact =>\r\n                    contact.id !== action.payload)\r\n            };\r\n        case 'ADD_CONTACT': \r\n            return {\r\n                ...state,\r\n                contacts: [action.payload, ...state.contacts]\r\n            };\r\n        case 'UPDATE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.map(contact => contact.id === action.payload.id ? (contact = action.payload) : contact)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport class Provider extends Component {\r\n    state = {\r\n        contacts: [],\r\n        dispatch: action => {\r\n            this.setState(state => reducer(state, action))\r\n        }\r\n    };\r\n\r\n    async componentDidMount() {\r\n        // need to use await with async\r\n        const res = await axios.get('https://jsonplaceholder.typicode.com/users');\r\n        \r\n        // will not get called until await line above completes\r\n        this.setState({contacts: res.data});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Consumer } from '../../Context';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default class Contact extends Component {\r\n    state = {\r\n        showContactInfo: false\r\n    }\r\n\r\n    onShowClick = () => {\r\n        this.setState({ showContactInfo: !this.state.showContactInfo });\r\n    }\r\n\r\n    onDeleteClick = async (id, dispatch) => {\r\n        // don't need to assign the response to variable since its blank and not being used\r\n        await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`)\r\n        \r\n        dispatch({type: 'DELETE_CONTACT', payload: id})\r\n    }\r\n\r\n    render() {\r\n        const { id, name, email, phone } = this.props.contact;\r\n        const { showContactInfo } = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className=\"card card-body mb-3\">\r\n                            <h4>\r\n                                {name}\r\n                                <i onClick={this.onShowClick}\r\n                                    className=\"fas fa-sort-down\"\r\n                                    style={{ cursor: 'pointer' }} />\r\n                                <i onClick={this.onDeleteClick.bind(this, id, dispatch)}\r\n                                    className=\"fas fa-times\"\r\n                                    style={{ cursor: 'pointer', float: 'right', color: 'red' }}></i>\r\n                                <Link to={`contact/edit/${id}`}>\r\n                                    <i className=\"fas fa-pencil-alt\" \r\n                                        style={{cursor: 'pointer', float: 'right', color: 'black', marginRight: '1rem'}}>\r\n                                    </i>\r\n                                </Link>\r\n                            </h4>\r\n                            {showContactInfo ? (\r\n                                <ul className=\"list-group\">\r\n                                    <li className=\"list-group-item\">Email: {email}</li>\r\n                                    <li className=\"list-group-item\">Phone: {phone}</li>\r\n                                </ul>\r\n                            ) : null}\r\n\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired,\r\n}\r\n","import React, { Component } from 'react';\r\nimport Contact from './Contact';\r\nimport { Consumer } from '../../Context';\r\n\r\n\r\nclass Contacts extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const {contacts} = value;\r\n                    return (\r\n                        <React.Fragment>\r\n                            <h1 className=\"display-4 mb-2\">\r\n                                <span className=\"text-danger\">Contact</span> List\r\n                            </h1>\r\n                            {contacts.map(contact => (\r\n                                <Contact\r\n                                    key={contact.id}\r\n                                    contact={contact}\r\n                                />\r\n                            ))}\r\n                        </React.Fragment>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Contacts;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = (props) => {\r\n    const { branding } = props;\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n            <div className=\"container\">\r\n                <a href=\"/\" className=\"navbar-brand\">\r\n                    {branding}\r\n                </a>\r\n                <div>\r\n                    <ul className='navbar-nav mr-auto'>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/\" className=\"nav-link\">\r\n                                <i className=\"fas fa-home\"/>\r\n                                Home\r\n                            </Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/contact/add\" className=\"nav-link\">\r\n                                <i className=\"fas fa-plus\"/>\r\n                                Add Contact\r\n                            </Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/about\" className=\"nav-link\">\r\n                            <i className=\"fas fa-question\"/>\r\n                                About\r\n                            </Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n};\r\n\r\nHeader.defaultProps = {\r\n    branding: 'My App'\r\n};\r\n\r\nHeader.propTypes = {\r\n    branding: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames'\r\n\r\nconst TextInputGroup = ({ label, name, value, placeholder, type, onChange, error }) => {\r\n  return (\r\n    <div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor={name}>{label}</label>\r\n        <input type={type}\r\n          name={name}\r\n          className={classnames('form-control form-control-lg', {'is-invalid': error})}\r\n          placeholder={placeholder}\r\n          value={value}\r\n          onChange={onChange} />\r\n        {error && <div className=\"invalid-feedback\">{error}</div>}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nTextInputGroup.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  placeholder: PropTypes.string.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  type: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  error: PropTypes.string\r\n};\r\n\r\nTextInputGroup.defaultProps = {\r\n  type: 'text'\r\n};\r\n\r\nexport default TextInputGroup;\r\n","import React, { Component } from 'react';\r\nimport { Consumer } from '../../Context';\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\nimport axios from 'axios';\r\n\r\nclass AddContact extends Component {\r\n  state = {\r\n    name: '',\r\n    email: '',\r\n    phone: '',\r\n    errors: {}\r\n  }\r\n\r\n  onChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  onSubmit = async (dispatch, e) => {\r\n    e.preventDefault();\r\n    \r\n    const { name, email, phone } = this.state;\r\n\r\n    // Check for errors\r\n    if(name === '') {\r\n      this.setState({errors: { name: 'Name is required'}});\r\n      return;\r\n    }\r\n    if(email === '') {\r\n      this.setState({errors: { email: 'Email is required'}});\r\n      return;\r\n    } \r\n    if(phone === '') {\r\n      this.setState({errors: { phone: 'Phone is required'}});\r\n      return;\r\n    }  \r\n\r\n    const newContact = {\r\n      name,\r\n      email,\r\n      phone\r\n    }\r\n\r\n    const res = await axios.post('https://jsonplaceholder.typicode.com/users', newContact);\r\n    dispatch({type: 'ADD_CONTACT', payload: res.data});\r\n\r\n    // Clear state\r\n    this.setState({\r\n      name: '',\r\n      email: '',\r\n      phone: '',\r\n      errors: {}\r\n    })\r\n\r\n    // Redirect\r\n    this.props.history.push('/');\r\n  }\r\n\r\n  render() {\r\n    const { name, email, phone, errors } = this.state;\r\n\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { dispatch } = value;\r\n          return (\r\n            <div className=\"card mb-3\">\r\n              <div className=\"card-header\">\r\n                Add Contact\r\n              <div className=\"card-body\">\r\n                  <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                    <TextInputGroup \r\n                      label=\"Name\"\r\n                      name=\"name\"\r\n                      placeholder=\"Enter name...\"\r\n                      value={name}\r\n                      onChange={this.onChange}\r\n                      error={errors.name}\r\n                    />\r\n                    <TextInputGroup \r\n                      label=\"Email\"\r\n                      name=\"email\"\r\n                      type='email'\r\n                      placeholder=\"Enter email...\"\r\n                      value={email}\r\n                      onChange={this.onChange}\r\n                      error={errors.email}\r\n                    />\r\n                    <TextInputGroup \r\n                      label=\"Phone\"\r\n                      name=\"phone\"\r\n                      placeholder=\"Enter phone...\"\r\n                      value={phone}\r\n                      onChange={this.onChange}\r\n                      error={errors.phone}\r\n                    />\r\n                    \r\n                    <input type=\"submit\"\r\n                      value=\"Add Contact\"\r\n                      className=\"btn btn-primary btn-block\" />\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )\r\n        }}\r\n      </Consumer>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddContact;","import React, { Component } from 'react';\r\nimport { Consumer } from '../../Context';\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\nimport axios from 'axios';\r\n\r\nclass EditContact extends Component {\r\n  state = {\r\n    name: '',\r\n    email: '',\r\n    phone: '',\r\n    errors: {}\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const {id} = this.props.match.params;\r\n\r\n    const res = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n\r\n    const contact = res.data;\r\n\r\n    this.setState({\r\n      name: contact.name,\r\n      email: contact.email,\r\n      phone: contact.phone\r\n    });\r\n  }\r\n\r\n  onChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  onSubmit = async (dispatch, e) => {\r\n    e.preventDefault();\r\n    \r\n    const { name, email, phone } = this.state;\r\n\r\n    // Check for errors\r\n    if(name === '') {\r\n      this.setState({errors: { name: 'Name is required'}});\r\n      return;\r\n    }\r\n    if(email === '') {\r\n      this.setState({errors: { email: 'Email is required'}});\r\n      return;\r\n    } \r\n    if(phone === '') {\r\n      this.setState({errors: { phone: 'Phone is required'}});\r\n      return;\r\n    }\r\n    \r\n    const updateContact = {\r\n      name, // ES6 syntax - 'name: name' same as just 'name\r\n      email,\r\n      phone\r\n    }\r\n\r\n    // PUT request to update contact\r\n    const {id} = this.props.match.params;\r\n    const res = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`, updateContact);\r\n    dispatch({type: 'UPDATE_CONTACT', payload: res.data});\r\n\r\n    // Clear state\r\n    this.setState({\r\n      name: '',\r\n      email: '',\r\n      phone: '',\r\n      errors: {}\r\n    })\r\n\r\n    // Redirect\r\n    this.props.history.push('/');\r\n  }\r\n\r\n  render() {\r\n    const { name, email, phone, errors } = this.state;\r\n\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { dispatch } = value;\r\n          return (\r\n            <div className=\"card mb-3\">\r\n              <div className=\"card-header\">\r\n                Edit Contact\r\n              <div className=\"card-body\">\r\n                  <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                    <TextInputGroup \r\n                      label=\"Name\"\r\n                      name=\"name\"\r\n                      placeholder=\"Enter name...\"\r\n                      value={name}\r\n                      onChange={this.onChange}\r\n                      error={errors.name}\r\n                    />\r\n                    <TextInputGroup \r\n                      label=\"Email\"\r\n                      name=\"email\"\r\n                      type='email'\r\n                      placeholder=\"Enter email...\"\r\n                      value={email}\r\n                      onChange={this.onChange}\r\n                      error={errors.email}\r\n                    />\r\n                    <TextInputGroup \r\n                      label=\"Phone\"\r\n                      name=\"phone\"\r\n                      placeholder=\"Enter phone...\"\r\n                      value={phone}\r\n                      onChange={this.onChange}\r\n                      error={errors.phone}\r\n                    />\r\n                    \r\n                    <input type=\"submit\"\r\n                      value=\"Update Contact\"\r\n                      className=\"btn btn-primary btn-block\" />\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )\r\n        }}\r\n      </Consumer>\r\n    )\r\n  }\r\n}\r\n\r\nexport default EditContact;","import React from 'react'\r\n\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4\">About Contact Manager</h1>\r\n      <p className=\"lead\">Simple app to manage contacts</p>\r\n      <p className=\"text-seconday\">Version 1.0.0</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4\">\r\n      <span className=\"text-danger\">404</span> Page Not Found\r\n      </h1>\r\n      <p className=\"lead\">\r\n        Sorry, page does not exist\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nclass Test extends Component {\r\nstate = {\r\n  title: '',\r\n  body: ''\r\n}\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/posts/1')\r\n      .then(response => response.json())\r\n      .then(data => this.setState({\r\n        title: data.title,\r\n        body: data.body\r\n      }));\r\n  }\r\n  \r\n  render() {\r\n    const { title, body } = this.state;\r\n    return (\r\n      <div>\r\n        <h1>{title}</h1>\r\n        <p>{body}</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Test;","import React from 'react';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Contacts from './components/contacts/Contacts';\r\nimport Header from './components/layout/Header';\r\nimport AddContact from './components/contacts/AddContact';\r\nimport EditContact from './components/contacts/EditContact';\r\nimport About from './components/pages/About';\r\nimport NotFound from './components/pages/NotFound';\r\nimport Test from './components/test/Test'\r\nimport { Provider } from './Context';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <Provider>\r\n        <Router>\r\n          <div className=\"App\">\r\n            <Header branding=\"Contact Manager\" />\r\n            <div className=\"container\">\r\n              <Switch>\r\n                <Route exact path=\"/\" component={Contacts} />\r\n                <Route exact path=\"/contact/add\" component={AddContact} />\r\n                <Route exact path=\"/contact/edit/:id\" component={EditContact} />\r\n                <Route exact path=\"/about\" component={About} />\r\n                <Route exact path=\"/test\" component={Test} />\r\n                <Route component={NotFound} />\r\n              </Switch>\r\n            </div>\r\n          </div>\r\n        </Router>\r\n      </Provider>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}